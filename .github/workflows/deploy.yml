name: Build and Deploy to ECR

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create key.pem file
        run: |
          echo "${{ secrets.PEM_KEY }}" > key.pem
          chmod 400 key.pem

      - name: Connect to EC2 and deploy__
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          IMAGE_TAG: latest
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Creating key.pem file"
          echo "${PEM_KEY}" > key.pem
          chmod 400 key.pem
          echo "Connecting to EC2 instance and pulling Docker image"
          ssh -t -o StrictHostKeyChecking=no -i key.pem ec2-user@$EC2_HOST << EOF
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "Removing old Docker images"
            docker images | grep $ECR_REGISTRY/$ECR_REPOSITORY | awk '{print \$3}' | tail -n +2 | xargs -I {} docker rmi -f {}
            echo "Running Docker container"
            docker stop luggage-server || true
            docker rm luggage-server || true
            docker run -d --name luggage-server $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
          rm key.pem